#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.16.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from encryption import TPKEService
from encryption.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  i32 lagrange(TPKEPublicKeyThrift PubKey,  S, i32 j)')
    print('  EncryptedMessageThrift encrypt(TPKEPublicKeyThrift PubKey, string m)')
    print('  string combineShares(TPKEPublicKeyThrift PubKey, EncryptedMessageThrift em,  shares)')
    print('  string decryptShare(TPKEPrivateKeyThrift PrivKey, EncryptedMessageThrift em)')
    print('  DealerThrift dealer(i32 players, i32 k)')
    print('  string aesEncrypt(AESKey key, string raw)')
    print('  string aesDecrypt(AESKey key, string encMes)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = TPKEService.Client(protocol)
transport.open()

if cmd == 'lagrange':
    if len(args) != 3:
        print('lagrange requires 3 args')
        sys.exit(1)
    pp.pprint(client.lagrange(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'encrypt':
    if len(args) != 2:
        print('encrypt requires 2 args')
        sys.exit(1)
    pp.pprint(client.encrypt(eval(args[0]), args[1],))

elif cmd == 'combineShares':
    if len(args) != 3:
        print('combineShares requires 3 args')
        sys.exit(1)
    pp.pprint(client.combineShares(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'decryptShare':
    if len(args) != 2:
        print('decryptShare requires 2 args')
        sys.exit(1)
    pp.pprint(client.decryptShare(eval(args[0]), eval(args[1]),))

elif cmd == 'dealer':
    if len(args) != 2:
        print('dealer requires 2 args')
        sys.exit(1)
    pp.pprint(client.dealer(eval(args[0]), eval(args[1]),))

elif cmd == 'aesEncrypt':
    if len(args) != 2:
        print('aesEncrypt requires 2 args')
        sys.exit(1)
    pp.pprint(client.aesEncrypt(eval(args[0]), args[1],))

elif cmd == 'aesDecrypt':
    if len(args) != 2:
        print('aesDecrypt requires 2 args')
        sys.exit(1)
    pp.pprint(client.aesDecrypt(eval(args[0]), args[1],))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
